/* amortizedAnalysis.txt: Amortized Analysis of the Dynamic Array. */
/* Name: Xiaoying Li
 * Date: 10/21/2019 */


1.
        For 50 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array, the first 8 values are added to the dynamic array without requiring a reallocation, so 8 ¡°units¡± are cost in this process. When the 9th value is added, the reallocation occurs, and there are 8 values need to be copied, so 8+1=9 ¡°units¡± are cost in this reallocation process. And now the capacity of the dynamic array doubled, which becomes 16. 
        Then the 10th-16th values are added to the dynamic array without requiring a reallocation, so 7 ¡°units¡± are cost in this process.  When the 17th value is added, the reallocation occurs, and there are 16 values need to be copied, so 16+1=17 ¡°units¡± are cost in this reallocation process. And now the capacity of the dynamic array doubled, which becomes 32. 
        Then the 18th-32th values are added to the dynamic array without requiring a reallocation, so 15 ¡°units¡± are cost in this process.  When the 33th value is added, the reallocation occurs, and there are 32 values need to be copied, so 32+1=33 ¡°units¡± are cost in this reallocation process. And now the capacity of the dynamic array doubled, which becomes 64.
        The last 17 values are added with no reallocation, so 17 ¡°units¡± are cost. 
        Thus, totally 8+9+7+17+15+33+17=50+8+16+32=106 ¡°units¡± are spent in the entire process of push these 50 values. And the average ¡°unit¡± cost for a push operation is 106/50=2.12.
        As N (ie. the number of pushes) grows large, under this strategy for resizing, the average big-oh complexity for a push is O(1)+.


2.
        For 50 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each timea new item is added to an already full dynamic array, the first 8 values are added to the dynamic array without requiring a reallocation, so 8 ¡°units¡± are cost in this process. When the 9th value is added, the reallocation occurs, and there are 8 values need to be copied, so 8+1=9 ¡°units¡± are cost in this reallocation process. And now the capacity of the dynamic array grows by 2, which becomes 10.
        Then the 10th values are added to the dynamic array without requiring a reallocation, so 1 ¡°unit¡± are cost in this process.  When the 11th value is added, the reallocation occurs, and there are 10 values need to be copied, so 10+1=11 ¡°units¡± are cost in this reallocation process. And now the capacity of the dynamic array grows by 2, which becomes 12.
        So on so forth. 
        Thus, totally 8+9+1+11+1+13+1+15+1+17+1+19+1+21+1+...+47+1+49+1=8+10+12+...+46+48+50=638 ¡°units¡± are spent in the entire process of push these 50 values. And the average ¡°unit¡± cost for a push operation is 638/50=12.76.
        As N (ie. the number of pushes) grows large, under this strategy for resizing, the average big-oh complexity for a push is O(n).